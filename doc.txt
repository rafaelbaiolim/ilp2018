#title
Especificação da Linguagem [nome?] (Versão 0.4)
##title

#title
Características da linguagem
##title

#block
• Imperativa;
• Fortemente tipada;
• Declaração explícita de variáveis;
• Vinculação estática de tipos;
• Sistema de escopo estático (léxico);
• Sensível à caixa (case-sensitive);
##block

#title
Sistema de Tipos
##title

#block
A linguagem possui um sistema de tipo com duas classes: tipos primitivos e tipos
agregados.
##block

#title
Tipos primitivos
##title

#block
Os tipos primitivos são números inteiros, valores lógicos e strings, representados
respectivamente pelos tipos int, bool e string.
##block

#title
Tipos Agregados (arranjo)
##title

#block
O tipo agregado é um arranjo de algum tipo primitivo. Dessa forma, podemos ter as
variantes: arranjo de inteiros, arranjo de lógicos e arranjo de strings.
##block

#title
O tipo string
##title

#block
Dados do tipo string são constantes e não são indexados como na maioria das linguagens.
O objetivo da existência do tipo string na linguagem é apenas fornecer uma maneira de
apresentar (escrever) mensagens na tela.
##block

#title
Especificação Léxica
##title

#subtitle
Identificadores
##subtitle

#block
Chamamos de identificador qualquer nome criado pelo usuário da linguagem. Os
identificadores seguem a mesma regra de formação da linguagem C:
• Devem iniciar com uma letra (minúscula ou maiúscula) ou um subtraço seguido de
letras, subtraços ou dígitos entre 0 e 9.
Um identificador será expresso pelo símbolo id nas especificações sintáticas.
##block

#subtitle
Literais
##subtitle

#block
Daremos o nome de literal a todo valor fixado no código. A linguagem possui
representação de literais para seus três tipos primitivos.
##block

#subtitle
Números
##subtitle

#block
Os números devem ser representados na base decimal e podem conter qualquer
combinação de dígitos entre 0 e 9. Os números negativos não serão processados na fase
léxica, mas sim na sintática e semântica. Dessa forma, o número -42, por exemplo,
consiste de dois lexemas: '-' e '42', e serão tratados como uma operação aritmética nas
análises sintática e semântica.
##block

#subtitle
Strings
##subtitle

#block
Os literais string possuem a mesma regra de formação definida pela linguagem C.
Exemplo: "isso é uma string!\n"
##block

#subtitle
Lógicos
##subtitle

#block
Os literais lógicos verdadeiro e falso são representados pelos lexemas true e false
respectivamente.
##block

#subtitle
Comentários
##subtitle

#block
A linguagem possui apenas comentários de linha:
• Começam com // e seguem até o final da linha.
De forma geral, os comentários podem conter qualquer tipo de símbolo, inclusive os não
permitidos pela linguagem. Os comentários devem ser processados corretamente pelo
analisador léxico e em seguida descartados.
##block

#subtitle
Palavras reservadas e símbolos
##subtitle

#block
As palavras reservadas e símbolos da linguagem são:
bool else false for if int read return skip stop string true var while write
( ) [ ] { } , ; + - * / % == != > >= < <= || && ! = += -= *= /= %= ? : "
##block

#title
Especificação Sintática
##title

#subtitle
Programa
##subtitle

#block
Um programa consiste de uma sequência não vazia de declarações de variáveis e
subprogramas.
programa ::= dec {dec}
##block

#subtitle
Variáveis
##subtitle

#block
Existem dois tipos de variáveis: as simples e as agregadas. Variáveis simples suportam
apenas um único valor de um determinado tipo primitivo em um determinado momento.
##block 

Exemplo:
var a, b = 3, c = 2 + b: int;
var str1, str2 = "String 2": string;
var i, j = true: bool;
var x, v[10], z[3] = {1, 5, 8}: int;

#subtitle
Declaração de Variáveis
##subtitle 

#block
decVar ::= 'var' listaSpecVars ':' tipo ';'
listaSpecVars ::= specVar {',' specVar}
specVar ::= specVarSimples | specVarSimplesIni |
specVarArranjo | specVarArranjoIni
Observe que a declaração de variáveis é indicada pela palavra reservada var. Observe
também que múltiplas variáveis podem ser declaradas de uma vez e que elas podem ser
inicializadas durante a declaração.
Na declaração de arranjos, o tamanho do mesmo deve ser especificado como um literal
numérico.
##block

#subtitle
Subprogramas (procedimentos e funções)
##subtitle

#block
A definição de procedimentos e funções possui uma sintaxe comum, exceto pela ausência
do tipo de retorno para procedimentos. Diferentemente da linguagem C, por exemplo,
não há separação entre declaração e definição de subprogramas, isto é, o subprograma é
declarado durante sua própria definição.
Exemplo:
##block

#subtitle
Declaração de Procedimento 
##subtitle

#block
def proc(y: int) {
    if (y < 0) {
    return;
    }
    x = 2 * y; // x é global!
}
##block

#subtitle
Declração de Função
##subtitle

#block
def func(x[], y: int; z: bool): int {
    a = x[y-1]: int;
    return a + 1;
}
##block

#subtitle
Declaração de Subprogramas
##subtitle

#block
decSub ::= decProc | decFunc
##block

#subtitle
Declaração de procedimento
##subtitle

#block
decProc ::= 'def' id '(' [listaParâmetros] ')' bloco
##block

#subtitle
Declaração de Função
##subtitle

#block
decFunc ::= 'def' id '(' [listaParâmetros] ')' ':' tipo bloco
##block

#subtitle
Lista de Parâmetros
##subtitle

#block
listaParâmetros ::= specParams {';' specParams}
specParams ::= param {',' param} ':' tipo
param ::= id | id '[]'
Parâmetros de tipo inteiro ou lógico são passados naturalmente por cópia e parâmetros
de tipo arranjo ou string são passados naturalmente por referência.
##block

#title 
Comandos
##title 

#block 
Um comando pode ser um comando simples ou bloco de comandos.
comando ::= cmdSimples | bloco
A seguir são relacionados os comandos simples da linguagem:
##block

#subtitle
Atribuição
##subtitle

#block 
cmdAtrib ::= atrib ';'
atrib ::= variável ('='|'+='|'-='|'*='|'/='|'%=') expressão
O comando de atribuição avalia o valor da expressão e o armazena na variável.
Uma atribuição somente pode ocorrer se a variável foi previamente declarada e se o
tipo do resultado da expressão é o mesmo indicado na declaração da variável.
As atribuições compostas devem ser traduzidas da seguinte maneira:
var X= expressão -> var = var X expressão
##block 

#subtitle 
Condicional If:
##subtitle

#block
cmdIf ::= 'if' '(' expressão ')' comando ['else' comando]
A estrutura condicional if é executada verificando o resultado da expressão de teste.
Se ela resultar no valor true, apenas o primeiro comando será executado. Se a
expressão resultar no valor false, caso a estrutura else esteja presente, apenas o
segundo comando será executado.
##block

#subtitle
Laço While:
##subtitle

#block
cmdWhile ::= 'while' '(' expressão ')' comando
O laço while inicia verificando o resultado da expressão de teste. Caso o valor seja
true, o comando do seu corpo é executado e o laço volta a testar o valor da expressão
de teste para a próxima iteração. Caso o valor seja false, a execução do laço é
interrompida.
##block

#subtitle
Laço For:
##subtitle

#block
cmdFor ::= 'for' '(' atrib-ini ';' expressão ';' atrib-passo ')' comando
O laço for inicia executando a atribuição de inicialização. A partir daí, antes de cada
iteração, o resultado da expressão de teste é verificado. Se ele for true, o comando 
corpo é executado e a atribuição de passo é executada em seguida, reiniciando o
processo. Se antes de qualquer iteração o valor resultado pela expressão de teste for
false, a execução do laço é interrompida
##block

#subtitle
Interrupção do laço:
##subtitle

#block
cmdStop ::= 'stop' ';'
O comando stop interrompe o laço mais próximo que o cerca. Ele só pode aparecer
dentro do corpo de comandos de repetição while e for.
##block

#subtitle
Salto de iteração do laço:
##subtitle

#block
cmdSkip ::= 'skip' ';'
O comando skip salta para a próxima iteração do laço mais próximo que o cerca,
ignorando a execução dos comandos que o seguem dentro deste laço. Ele só pode
aparecer dentro do corpo de comandos de repetição while e for.
##block

#subtitle
Retorno de subprograma:
##subtitle

#block
cmdReturn ::= 'return' [expressão] ';'
O comando return encerra a execução do subprograma que o cerca retornando o
valor resultado pela expressão. A expressão de retorno de uma função deve resultar
em um valor do mesmo tipo para o qual a função foi definida. Funções devem
obrigatoriamente conter pelo menos um comando return. Já procedimentos podem
ou não conter comandos return. Caso o tenham, eles devem retornar nada: return;
Como o programa principal é definido por meio de uma função, ele deve conter pelo
menos um comando return e o valor retornado deve ser um número inteiro.
##block

#subtitle
Chamada de Procedimento:
##subtitle

#block
cmdChamadaProc ::= id '(' [expressão {',' expressão}] ')' ';'
Como a chamada de procedimentos não resulta em um valor, é necessário um
comando para sua execução. A chamada de funções possui sintaxe semelhante,
exceto por não ser um comando, e sim uma expressão.
##block

#subtitle
Entrada Read:
##subtitle

#block
cmdRead ::= 'read' variável ';'
##block

#subtitle
Saída Write:
##subtitle

#block
cmdWite ::= 'write' expressão [, expressão] ';'
##block 

#subtitle
Bloco
##subtitle

#block
Um bloco é uma sequência de (nenhuma ou várias) declarações de subprogramas e
variáveis seguida de uma sequência de (nenhum ou vários) comandos. Um bloco é
circundado por chaves { }.
bloco ::= '{' {dec} {comando} '}'
##block

#title 
Expressão
##title 

#block
Uma expressão pode conter valores dos três tipos definidos (inteiros, lógicos e strings),
uso de variáveis, chamadas de função e outras expressões. Uma expressão pode estar
cercada por parênteses e se relacionar a outras expressões por meio dos seguintes
operadores:
--- TABELA ---
##block

#block
O operador condicional ternário é formado da seguinte maneira:
opTern ::= expressão-teste '?' expressão-então ':' expressão-senão
A expressão teste é avaliada. Se o resultado for true a expressão então é resultada,
caso contrário, a expressão senão é resultada. Dessa forma, o resultado desse
operador é sempre uma expressão. O operador pode ser utilizado assim: x = a > 0 ?
a * 2 : a + 1;
##block

#subtitle
Uso de variável
##subtitle

#block 
Como o uso de uma variável resulta no valor armazenado pela variável, todo uso de
variável é uma expressão. Variáveis simples são usadas por meio do identificador (nome)
associado a ela e variáveis compostas (arranjo) são usadas por meio do identificador e a
posição numérica do elemento acessado.
variável ::= id | id '[' expressão ']'
Observe que a sintaxe do uso de variável não impede que uma variável declarada como
simples seja utilizada como arranjo. Essa associação deve ser verificada na etapa de
análise semântica.
##block 

#title 
Especificação Semântica
##title

#subtitle
Programa
##subtitle

#block 
A última declaração deve ser obrigatoriamente a da rotina principal, pela qual se dará o
início da execução do programa. Todas as declarações realizadas no programa (fora de
qualquer subprograma) estão dentro do escopo global.
##block

#subtitle 
Declaração
##subtitle

#block 
• Declaração de variáveis, funções e procedimentos são responsáveis por adicionar
os símbolos envolvidos e suas vinculações na tabela de símbolos.
• Caso a declaração de uma variável contenha a inicialização da mesma, o tipo da
expressão de inicialização deve ser o mesmo da variável.
• A última declaração global deve ser de uma função chamada "main" do tip
##block

#title 
Comandos:
##title

#subtitle
If
##subtitle
#block
• A expressão condicional do comando if deve resultar em um valor do tipo lógico.
##block

#subtitle
While
##subtitle

#block
• A expressão condicional do comando while deve resultar em um valor do tipo
lógico.
##block

#subtitle
For
##subtitle

#block
• As atribuições da inicialização e do passo devem ser analisadas como um comando
de atribuição normal
• A expressão condicional deve resultar em um valor do tipo lógico.
##block
#subtitle
Stop
##subtitle
#block
• O comando stop só pode aparecer dentro de um comando de repetição (while ou
for).
##block

#subtitle
Skip
##subtitle
#block
• O comando skip só pode aparecer dentro de um comando de repetição (while ou
for).
##block

#subtitle
Return
##subtitle
#block
• Caso apareça dentro de uma função, o tipo da expressão de retorno deve ser o
mesmo do retorno declarado da função. Caso apareça dentro de um procedimento,
o comando return não pode ter expressão.
##block

#subtitle
Read
##subtitle
#block
• A variável utilizada no comando read deve estar declarada e visível no escopo
atual.
##block

#subtitle
Write
##subtitle
#block
• Não há análise especial para o comando write.
Chamada de procedimento
• O procedimento chamado deve estar declarado e visível no escopo atual.
• O número de argumentos fornecidos deve ser o mesmo da declaração do
procedimento.
• Os argumentos fornecidos devem ter a mesma ordem de tipo utilizada na
declaração do procedimento.
##block

#subtitle
Atribuição
##subtitle
#block
• O lado esquerdo da atribuição deve ser uma variável declarada e visível no escopo
atual (simples ou acesso de array)
• O lado direito deve ser uma expressão com tipo igual ao da variável do lado
esquerdo da atribuição.
##block
#subtitle
Bloco
##subtitle
#block
• Define um novo escopo estático. O escopo é criado no início do bloco e finalizado
no término do bloco.
##block
#title
Expressões
##title

#subtitle
Aritmética (+ - * / % neg)
##subtitle

#block
• O(s) operando(s) devem ser do tipo inteiro. O tipo resultante é inteiro.
##block

#subtitle
Relacional (> >= < <=)
##subtitle

#block
• Os operandos devem ser do tipo inteiro. O tipo resultante é lógico.
##block

#subtitle
Igualdade (== !=)
##subtitle

#block
• Os operandos devem ser do mesmo tipo. O tipo resultante é lógico.
##block

#subtitle
Lógica (&& || !)
##subtitle

#block
• O(s) operando(s) devem ser do tipo lógico. O tipo resultante é lógico.
##block

#subtitle
Ternária
##subtitle

#block
• A expressão condicional deve resultar um valor do tipo lógico.
• As expressões consequente e alternativa devem possuir o mesmo tipo.
• O tipo resultante é o mesmo tipo da expressão consequente.
##block

#subtitle
Uso de variável
##subtitle

#block
• A variável deve estar declarada e visível no escopo atual. O tipo resultante é o tipo
declarado da variável.
##block

#subtitle
Chamada de função:
##subtitle

#block
• Análise análoga à chamada de procedimento.
• O tipo resultante é igual ao tipo declarado da função
##block
